[{"C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\index.js":"1","C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\App.js":"2","C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\reportWebVitals.js":"3","C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\AppClass.js":"4","C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\home.js":"5","C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\users.js":"6"},{"size":580,"mtime":1617612304732,"results":"7","hashOfConfig":"8"},{"size":9267,"mtime":1618572618854,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":9536,"mtime":1618787406102,"results":"11","hashOfConfig":"8"},{"size":141,"mtime":1616010700894,"results":"12","hashOfConfig":"8"},{"size":482,"mtime":1617672656096,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"3f1tyr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\index.js",[],["28","29"],"C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\App.js",["30","31"],"// React components have a built in state object. When this object changed,\n// react re-renders the component. To know when a variable should be defined as\n// a state object property, consider if setState will always be called on it\n// inside the render() function. Since the components re-renders when setState\n// is called, this will cause react to throw an error as such an implementation\n// will result in an infinite loop.\n// Allows use of state hooks in function components. Can also be written as a\n// one liner along with importing React:\n// import React, {useState} from 'react';\nimport { useState, useEffect } from 'react';\n// import $ from 'jquery';\nimport { Users } from './users'\n\n// Add new webpages to react. Files are assumed to .js by default.\nimport Home from './home';\n\nimport logo from './images/logo.svg';\nimport './stylesheets/App.css';\n\n// Three ways of setting variable default values are demonstrated in this\n// file:\n// 1. Assigning a variable:\n// var varName = props.propName || defaultValue\n// 2. Using JS destructuring syntax in the argument instead of (props):\n// function functionName ({propName1=value, propName2=value}) {}\n// 3. Using {} inside the return value.\n// return {props.propName || defaultValue}\n\n// Arguments passed to react function components are passed as objects. As such,\n// to return argument values, you need to reference properties of the object.\n// The object is also read only and cannot be modified. This means that:\n// props.sum = props.sum + var\n// would be invalid. To modify them define a new local variable instead.\nfunction Button(props) {\n  const handleClick = e => {\n    if (!props.disabled && props.onClick) props.onClick(e)\n  }\n  return (\n    <button className={props.className} type={props.type || 'button'} name={props.name} disabled={props.disabled}onClick={handleClick}>\n      {props.value || props.children || 'click me!'}\n    </button>\n  )\n}\n\n// All react components may only have a single tag at the highest level. This\n// means, for example, that you cannot return in the same component:\n// <div></div><div></div>\n// If you don't want to use a parent div tag, you can instead use:\n// <React.Fragment key={var}></React.Fragment>\n// When using React.Fragment, one can also pass it a key attribute whereby the\n// fragment will return a key warning error if not present. React.Fragment can\n// also be written in short hand without keys like this:\n// <></>\nfunction CheckBox(props) {\n  const handleChange = e => {\n    if (!props.disabled && props.onChange) props.onChange(e)\n  }\n  const handleClick = e => {\n    if (!props.disabled && props.onClick) props.onClick(e)\n  }\n  return (\n    <>\n      <input className={props.className} type=\"checkbox\" name={props.name} id={props.id} onChange={handleChange} onClick={handleClick} defaultChecked={props.defaultChecked} />\n      <label htmlFor={props.id}>{props.label}</label>\n    </>\n  )\n}\n\n// Demonstrates the state hook version of a generic setState. The typical\n// inplementation of state hooks can be found under the App function. Defining\n// multiple state hooks as a single object allows the handleChange function to\n// be made generic. It is recommended that states be handled in a main function\n// and passed to child component functions, but this one handles its own states\n// for demonstration purposes.\nfunction TestInputBox({type, placeholder='type text here', loginSuccess, errorMsgState, busyState}) {\n  const [errorMsg, setErrorMsg] = errorMsgState\n  const [busy, setBusy] = busyState\n  let [states, setState] = useState({\n    user: '',\n    password: ''\n  })\n\n  // React function components that use JSX need to be in PascalCase or an error\n  // will occur. However, event handler functions are written in camelCase.\n  function handleChange(e) {\n    // e.target refers to the element which raised the event. You might also\n    // encounter e.currentTarget, which refers to the element that handles the\n    // event. The difference being whether the event of the element bubbles up\n    // to its parent container.\n    setState({ ...states, [e.target.name]: e.target.value })\n  }\n\n  function doLogin() {\n    const user = states.user\n    const password = states.password\n    const isUser = user === Users.user\n    const isPassword = password === Users.password\n\n    console.log(`Login attempt\nuser: ${user}\npassword: ${password}`)\n\n    // You set busy to prevent things like multiple logins or render a spinner.\n    setBusy(true)\n\n    // Demonstrates sending and receiving information from a http endpoint.\n    // $.ajax({\n    //   url: 'https://kdiris.azurewebsites.net/api/login',\n    //   method: 'POST',\n    //   // Data is sent as a string by default, and has to be converted to json\n    //   // using JSON.stringify if you wish to send it as json.\n    //   data: JSON.stringify({\n    //     user: states.user,\n    //     password: states.password\n    //   }),\n    //   // Tells endpoint to expect a json file.\n    //   contentType: 'application/json',\n    //   success: function(data) {\n    //     console.log(data)\n    //     if (data.status === 200) {\n    //       loginSuccess() && loginSuccess({ user: states.user })\n    //       setBusy(false)\n    //     } else {\n    //       console.log('invalid username or password')\n    //       setBusy(false)\n    //     }\n    //   },\n    //   error: function() {\n    //     console.log('Error in communicating with backend')\n    //     setState({ ...states, busy: false })\n    //   }\n    // })\n\n    if (isUser && isPassword) {\n      loginSuccess({ user: states.user })\n      setState({\n        ...states,\n        user: '',\n        password: ''\n      })\n      setErrorMsg('')\n      setBusy(false)\n    } else {\n      setState({\n        ...states,\n        user: '',\n        password: ''\n      })\n      setErrorMsg('you = u and password = pw')\n      setBusy(false)\n    }\n  }\n\n  return (\n    <>\n      <div>\n        {/* Commenting within html tags in JSX must be done this way. */}\n        {/* onChange returns a synthetic event with properties of the\n          triggering element assigned to the event.target object. */}\n        <input name=\"user\" placeholder={placeholder} onChange={handleChange} value={states.user}/>\n      </div>\n      <div>\n        <input name=\"password\" placeholder={placeholder} onChange={handleChange} value={states.password}/>\n      </div>\n      {/* Function can reference other functions in the same file.*/}\n      <div><Button value=\"Login\" onClick={doLogin} /></div>\n      {/* Demonstrates conditional rendering using &&. To render multiple lines,\n        wrap them in (). */}\n      {errorMsg && <div>{errorMsg}</div>}\n    </>\n  )\n}\n\nfunction TestLink(props) {\n  // Demonstrates an if statement in a function component.\n  if (props.href && props.value) {\n    return <a href={props.href} onClick={props.onClick}>{props.value}</a>\n  }\n  // Demonstrates returning a text string.\n  return 'insufficient link parameters'\n\n  // The above can alternatively be written in the following way so as to make\n  // return only appear once:\n  // let output = 'insufficient link parameters'\n  // if (props.href && props.value) {\n  //   output = <a href={props.href}>{props.value}</a>\n  // }\n  // return output\n}\n\nfunction App(props) {\n  // Demonstrates setting a default value.\n  const link = props.link || 'test link';\n  const initialPage = 'login'\n  // Demonstrates the use of state hooks.\n  // useState(initialState) returns an array containing the current value of\n  // the state as well as a function with which to change the value. The\n  // function can be called using functionName(newState).\n  const [clockwise, setClockwise] = useState(true)\n  const [user, setUser] = useState('')\n  const [activePage, setActivePage] = useState('')\n  // Since state hooks include their updating function, there is no need to\n  // define a function to update their values that can be passed to a child.\n  // However, the typical implmentation of state hooks also makes it more\n  // difficult to pass alls state values to the child as they cannot be passed\n  // as a single object.\n  const [errorMsg, setErrorMsg] = useState('')\n  const [busy, setBusy] = useState(false)\n\n  const initialize = () => setActivePage(initialPage)\n  const handleClick = e => {\n    // You need this to prevent the page from trying to reach the linked page.\n    e.preventDefault()\n    setActivePage('home')\n  }\n  const reverseSpin = () => setClockwise(!clockwise)\n  const handleLogin = u => {\n    setUser(u.user)\n    setActivePage('home')\n  }\n\n  // Demonstrates the function equivalent of componentDidMount().\n  useEffect(() => {\n      initialize()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {activePage === 'login' && (\n        <div>\n          <div><TestLink href=\"./home.html\" onClick={handleClick} value={link}/></div>\n          {/* Demonstrates conditional classes based on state.*/}\n          <img src={logo} className={\"App-logo\" + (clockwise ? \"\" : \" reverse\")} alt=\"logo\"/>\n          <div><CheckBox label=\"reverse spin\" onClick={reverseSpin}/></div>\n          <TestInputBox placeholder=\"type text here\" loginSuccess={handleLogin} errorMsgState={[errorMsg, setErrorMsg]} busyState={[busy, setBusy]}/>\n        </div>\n      )}\n      {activePage ==='home' && <Home/>}\n    </div>\n  )\n}\n\nexport default App;\n","C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\reportWebVitals.js",[],"C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\AppClass.js",[],"C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\home.js",[],"C:\\WinNMP\\WWW\\TestJavaScript\\reactTest\\react-test\\src\\users.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":77,"column":10,"nodeType":"38","messageId":"39","endLine":77,"endColumn":14},{"ruleId":"36","severity":1,"message":"40","line":200,"column":10,"nodeType":"38","messageId":"39","endLine":200,"endColumn":14},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'busy' is assigned a value but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]